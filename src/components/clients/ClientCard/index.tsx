// src/components/clients/ClientCard/index.tsx
import React from 'react';
import type { Client } from '../../../types/database';
import { Button } from '../../ui/Button';
import { User, Phone, Mail, MessageCircle, CreditCard, Receipt, AlertTriangle, Calendar, MapPin } from 'lucide-react';

interface ClientCardProps {
  client: Client;
  onEdit: (client: Client) => void;
  onDelete: (client: Client) => void;
  onViewDetails: (client: Client) => void;
}

const ClientCard: React.FC<ClientCardProps> = ({
  client,
  onEdit,
  onDelete,
  onViewDetails
}) => {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800';
      case 'paused':
        return 'bg-yellow-100 text-yellow-800';
      case 'completed':
        return 'bg-gray-100 text-gray-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  const getSourceColor = (source: string) => {
    switch (source) {
      case 'private':
        return 'text-gray-600';
      case 'yasno':
        return 'text-purple-600';
      case 'zigmund':
        return 'text-blue-600';
      case 'alter':
        return 'text-indigo-600';
      default:
        return 'text-gray-600';
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (dateString: string | null | undefined) => {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º date-fns –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      // import { format } from 'date-fns'; import { ru } from 'date-fns/locale';
      // return format(new Date(dateString), 'd MMM', { locale: ru });
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      return new Date(dateString).toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' });
    } catch {
      return dateString;
    }
  };

  return (
    <div className="bg-white overflow-hidden shadow rounded-lg hover:shadow-md transition-shadow duration-200">
      <div className="px-4 py-5 sm:p-6">
        {/* –°—Ç—Ä–æ–∫–∞ ID –∏ —Å—Ç–∞—Ç—É—Å–∞ */}
        <div className="flex justify-between items-start">
          <div>
            <p className="text-xs text-gray-500">ID: {client.id}</p>
            <h3 className="text-lg leading-6 font-medium text-gray-900 mt-1">
              {client.name}
            </h3>
          </div>
          <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusColor(client.status)}`}>
            {client.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' :
             client.status === 'paused' ? '–ù–∞ –ø–∞—É–∑–µ' :
             '–ó–∞–≤–µ—Ä—à—ë–Ω'}
          </span>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="mt-4 space-y-1">
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Å–µ—Å—Å–∏–∏, –ø–æ—Å–ª–µ–¥–Ω—è—è */}
          <div className="flex justify-between text-sm text-gray-600">
            <span>–°–µ—Å—Å–∏–π: {client.total_sessions}</span>
            <span>–ü–æ—Å–ª–µ–¥–Ω—è—è: {formatDate(client.last_session_at)}</span>
          </div>

          {/* –§–æ—Ä–º–∞—Ç, —Å—Ç–æ–∏–º–æ—Å—Ç—å, –∏—Å—Ç–æ—á–Ω–∏–∫ */}
          <div className="flex flex-wrap gap-2 text-xs">
            <span className="inline-flex items-center">
              <CreditCard className="mr-1 h-3 w-3" />
              {client.payment_type === 'self-employed' ? '–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π' :
               client.payment_type === 'ip' ? '–ò–ü' :
               client.payment_type === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–µ' :
               '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞'}
            </span>
            <span className="inline-flex items-center">
              <span className="mr-1">‚Ä¢</span>
              {client.format === 'online' ? 'üíª –û–Ω–ª–∞–π–Ω' : 'üìç –û—Ñ–ª–∞–π–Ω'}
            </span>
            <span className="inline-flex items-center">
              <span className="mr-1">‚Ä¢</span>
              <span className={getSourceColor(client.source)}>{client.source === 'private' ? '–ß–∞—Å—Ç–Ω—ã–π' : client.source}</span>
            </span>
            <span className="inline-flex items-center">
              <span className="mr-1">‚Ä¢</span>
              {client.session_price} ‚ÇΩ
            </span>
          </div>

          {/* –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å */}
          {client.debt && client.debt > 0 && (
            <div className="flex items-center text-sm text-red-600 mt-1">
              <AlertTriangle className="mr-1 h-4 w-4" />
              <span>–î–æ–ª–∂–Ω–∏–∫: {client.debt} ‚ÇΩ</span>
            </div>
          )}
        </div>

        {/* –ö–æ–Ω—Ç–∞–∫—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞) */}
        {(client.phone || client.email || client.telegram) && (
          <div className="mt-3 pt-3 border-t border-gray-200">
            <div className="flex flex-wrap gap-2 text-xs text-gray-500">
              {client.phone && (
                <div className="flex items-center">
                  <Phone className="mr-1 h-3 w-3" />
                  <span>{client.phone}</span>
                </div>
              )}
              {client.email && (
                <div className="flex items-center">
                  <Mail className="mr-1 h-3 w-3" />
                  <span>{client.email}</span>
                </div>
              )}
              {client.telegram && (
                <div className="flex items-center">
                  <MessageCircle className="mr-1 h-3 w-3" />
                  <span>{client.telegram}</span>
                </div>
              )}
              {client.location && (
                <div className="flex items-center">
                  <MapPin className="mr-1 h-3 w-3" />
                  <span>{client.location}</span>
                </div>
              )}
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="mt-4 flex space-x-2">
          <Button variant="outline" size="sm" onClick={() => onViewDetails(client)}>
            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
          </Button>
          <Button variant="outline" size="sm" onClick={() => onEdit(client)}>
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          </Button>
        </div>
      </div>
    </div>
  );
};

export default ClientCard;